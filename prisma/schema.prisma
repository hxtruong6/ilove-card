// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../prisma/generated/prisma"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id                     String            @id @default(auto()) @map("_id") @db.ObjectId
  email                  String            @unique
  phone                  String?           @unique
  password               String?
  name                   String?
  avatar                 String?           @default("https://avataaars.io/?avatarStyle=Circle&topType=LongHairNotTooLong&accessoriesType=Round&hairColor=Auburn&facialHairType=Blank&clotheType=BlazerSweater&eyeType=Hearts&eyebrowType=Default&mouthType=Default&skinColor=Light") @map("image")
  subscriptionStatus     String            @default("FREE") // "FREE" | "MONTHLY" | "YEARLY" | "LIFETIME"
  subscriptionEndDate    DateTime? // null for FREE and LIFETIME
  createdAt              DateTime          @default(now())
  updatedAt              DateTime          @updatedAt
  emailVerified          DateTime?
  phoneVerifiedAt        DateTime?
  isActive               Boolean           @default(true)
  accountStatus          String            @default("ACTIVE") // "ACTIVE" | "INACTIVE" | "BANNED"
  accountStatusReason    String?
  accountStatusUpdatedAt DateTime?
  lastActiveTreeId       String?           @db.ObjectId
  lastActiveTree         Tree?             @relation("LastActiveTree", fields: [lastActiveTreeId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  trees                  Tree[]
  messages               Message[]
  receivedTrees          TreeRecipient[]
  subscriptions          Subscription[]
  notifications          Notification[]
  activities             UserActivity[]
  exports                Export[]
  mentions               Mention[]
  reactions              MessageReaction[]
  savedTrees             SavedTree[]       @relation("UserSavedTree")
  treesOwnedAndSaved     SavedTree[]       @relation("TreeOwner")
  sentFriendRequests     Friend[]          @relation("UserFriend")
  receivedFriendRequests Friend[]          @relation("FriendUser")
  appSessions            UserSession[]     @relation("UserAppSession")
  accounts               Account[]
  sessions               Session[]
}

model Tree {
  id              String          @id @default(auto()) @map("_id") @db.ObjectId
  title           String
  description     String?
  themeId         String          @db.ObjectId
  theme           Theme           @relation(fields: [themeId], references: [id])
  visibility      String          @default("INVITE_ONLY") // "PUBLIC" | "INVITE_ONLY" | "PRIVATE"
  maxMessages     Int             @default(20) // Maximum messages for a "full" tree, used for progress tracking
  isDefaultEvent  Boolean         @default(false)
  eventType       String? // "NEW_YEAR", "CHRISTMAS", "BIRTHDAY", etc.
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  owner           User            @relation(fields: [ownerId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  ownerId         String          @db.ObjectId
  recipients      TreeRecipient[]
  messages        Message[]
  views           TreeView[]
  shares          TreeShare[]
  exports         Export[]
  progressEntries TreeProgress[]
  lastActiveUsers User[]          @relation("LastActiveTree")
  savedTrees      SavedTree[]
}

model Theme {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String   @unique // e.g., "Christmas", "Halloween", "Birthday"
  isPremium   Boolean  @default(false)
  colorScheme Json? // e.g., { "primary": "#2E5EAA", "secondary": "#A3BFFA" }
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  trees       Tree[]

  @@index([isPremium])
}

model TreeRecipient {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  tree      Tree     @relation(fields: [treeId], references: [id])
  treeId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @db.ObjectId
  role      String   @default("CONTRIBUTOR") // "CONTRIBUTOR" | "VIEWER"
  createdAt DateTime @default(now())

  @@unique([treeId, userId])
  @@index([treeId])
  @@index([userId])
  @@index([role])
}

// A user could save a list of trees of their friends
model SavedTree {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  treeOwnerId String   @db.ObjectId // The owner of the saved tree
  treeId      String   @db.ObjectId
  userId      String   @db.ObjectId // The user who saved the tree
  createdAt   DateTime @default(now())

  treeOwner User @relation("TreeOwner", fields: [treeOwnerId], references: [id])
  tree      Tree @relation(fields: [treeId], references: [id])
  user      User @relation("UserSavedTree", fields: [userId], references: [id])

  @@unique([userId, treeId]) // Prevent duplicate saves
  @@index([treeOwnerId]) // get all saved trees for a user
  @@index([treeId]) // get all users who saved a tree
  @@index([userId]) // get all trees saved by a user
}

model Friend {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  friendId  String   @db.ObjectId
  status    String   @default("PENDING") // "PENDING" | "ACCEPTED" | "REJECTED"
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User @relation("UserFriend", fields: [userId], references: [id])
  friend User @relation("FriendUser", fields: [friendId], references: [id])

  @@unique([userId, friendId]) // Prevent duplicate friend relationships
  @@index([userId])
  @@index([friendId])
  @@index([status])
}

model Message {
  id            String            @id @default(auto()) @map("_id") @db.ObjectId
  content       String
  media         MessageMedia[]
  decorationId  String?           @db.ObjectId
  decoration    Decoration?       @relation(fields: [decorationId], references: [id])
  isPremium     Boolean           @default(false)
  isSelfMessage Boolean           @default(false)
  isPublic      Boolean           @default(false)
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
  tree          Tree              @relation(fields: [treeId], references: [id])
  treeId        String            @db.ObjectId
  sender        User              @relation(fields: [senderId], references: [id])
  senderId      String            @db.ObjectId
  reactions     MessageReaction[]
  mentions      Mention[]

  @@index([treeId])
  @@index([senderId])
  @@index([decorationId])
  @@index([isSelfMessage])
  @@index([isPublic])
}

model MessageMedia {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  messageId String   @db.ObjectId
  message   Message  @relation(fields: [messageId], references: [id])
  type      String // "IMAGE" | "VIDEO" | "AUDIO"
  url       String // URL pointing to Google Cloud Storage, e.g., "https://storage.googleapis.com/bucket-name/file-id"
  size      Int // in bytes, to enforce limits (e.g., max 5MB for free users)
  isPremium Boolean  @default(false)
  mimeType  String // e.g., "image/jpeg", "video/mp4", "audio/mp3"
  createdAt DateTime @default(now())

  @@index([messageId])
  @@index([type])
}

model Decoration {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  type      String // e.g., "Star", "Heart", "Gift"
  icon      String // emoji or icon reference
  isPremium Boolean   @default(false)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  messages  Message[]

  @@index([type])
  @@index([isPremium])
}

model Subscription {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  userId    String    @db.ObjectId
  user      User      @relation(fields: [userId], references: [id])
  type      String // "MONTHLY" | "YEARLY" | "LIFETIME"
  status    String // "ACTIVE" | "CANCELLED" | "EXPIRED"
  startDate DateTime  @default(now())
  endDate   DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([userId])
  @@index([status])
}

model Export {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  treeId    String   @db.ObjectId
  tree      Tree     @relation(fields: [treeId], references: [id])
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  format    String // "IMAGE" | "PDF" | "GIF" (as per post-MVP export options)
  url       String // URL to the exported file, stored in Google Cloud Storage
  createdAt DateTime @default(now())

  @@index([treeId])
  @@index([userId])
  @@index([createdAt])
}

model TreeView {
  id       String   @id @default(auto()) @map("_id") @db.ObjectId
  treeId   String   @db.ObjectId
  tree     Tree     @relation(fields: [treeId], references: [id])
  userId   String?  @db.ObjectId // null for anonymous views
  viewedAt DateTime @default(now())

  @@index([treeId])
  @@index([viewedAt])
}

model TreeShare {
  id       String   @id @default(auto()) @map("_id") @db.ObjectId
  treeId   String   @db.ObjectId
  tree     Tree     @relation(fields: [treeId], references: [id])
  userId   String   @db.ObjectId
  platform String // e.g., "Facebook", "Instagram", "Twitter"
  sharedAt DateTime @default(now())

  @@index([treeId])
  @@index([sharedAt])
}

model Notification {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  type      String // e.g., "NEW_MESSAGE", "TREE_SHARED", "MENTION"
  message   String // e.g., "Hey Aidan, let's write a message for me"
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())

  @@index([userId])
  @@index([createdAt])
}

model UserActivity {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  action    String // e.g., "CREATED_TREE", "ADDED_MESSAGE", "SHARED_TREE"
  treeId    String?  @db.ObjectId
  createdAt DateTime @default(now())

  @@index([userId])
  @@index([createdAt])
  @@index([treeId])
}

// New Engagement Metric: Tracks reactions to messages (e.g., likes, emojis) to measure user interaction
model MessageReaction {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  messageId String   @db.ObjectId
  message   Message  @relation(fields: [messageId], references: [id])
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  type      String // e.g., "LIKE", "HEART", "SMILE"
  createdAt DateTime @default(now())

  @@unique([messageId, userId]) // Prevent duplicate reactions from the same user
  @@index([messageId])
  @@index([userId])
  @@index([createdAt])
}

// New Engagement Metric: Tracks tree completion progress (e.g., for the "Tree is 50% decorated" indicator)
model TreeProgress {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  treeId    String   @db.ObjectId
  tree      Tree     @relation(fields: [treeId], references: [id])
  progress  Float // Percentage (0-100), calculated as (current messages / maxMessages) * 100
  updatedAt DateTime @default(now())

  @@index([treeId])
  @@index([updatedAt])
}

// New Engagement Metric: Tracks user session activity to measure active usage and session duration
model UserSession {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  userId    String    @db.ObjectId
  user      User      @relation("UserAppSession", fields: [userId], references: [id])
  startedAt DateTime  @default(now())
  endedAt   DateTime? // Null if session is still active
  duration  Int? // Duration in seconds, calculated when session ends

  @@index([userId])
  @@index([startedAt])
}

model Mention {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  messageId       String   @db.ObjectId
  message         Message  @relation(fields: [messageId], references: [id])
  mentionedUserId String   @db.ObjectId
  mentionedUser   User     @relation(fields: [mentionedUserId], references: [id])
  createdAt       DateTime @default(now())

  @@index([messageId])
  @@index([mentionedUserId])
}

// --- NextAuth.js Adapter Models ---
model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @map("user_id") @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// --- End NextAuth.js Adapter Models ---
